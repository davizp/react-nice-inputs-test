{"version":3,"sources":["components/Input.js","components/Select.js","components/InputGroupCheckbox.js","components/InputGroupRadio.js","components/Autocomplete.js","components/DropDownDates.js","components/InputMask.js","components/App.js","serviceWorker.js","index.js"],"names":["InputWrapper","state","firstName","handleChange","value","name","event","_this","setState","Object","defineProperty","react_default","a","createElement","className","htmlFor","lib","type","id","this","classList","onChange","attrs","placeholder","Component","_internals","label","SelectWrapper","countries","_handleChange","options","countriesOptions","defaultText","disabled","InputGroupWrapper","pets","split","petsOptions","tasks","taksOptions","AutocompleteWrapper","country","boxClassList","autoComplete","maxLength","dataList","icon","DropDownDateWrapper","birth","labelM","labelD","labelY","mmClassList","ddClassList","yyyyClassList","defaultTextM","defaultTextD","defaultTextY","maxDate","minDate","format","InputMaskWrapper","creditCard","data-testid","required","cc","last","App","href","target","rel","Input","Select","InputGroupCheckbox","InputGroupRadio","Autocomplete","DropDownDates","InputMask","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.84a69669.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Input } from 'react-nice-inputs';\n\nclass InputWrapper extends Component {\n\n  state = {\n    firstName: ''\n  }\n\n  handleChange = (value, name, event) => {\n    this.setState({ [name]: value });\n    // this.setState({ [event.target.name]: event.target.value });\n  }\n\n  render() {\n\n    return (\n      <div className=\"input-controls\">\n        <label htmlFor=\"firstName\">First Name: </label>\n        <Input\n          type=\"text\"\n          id=\"firstName\"\n          name=\"firstName\"\n          value={this.state.firstName}\n          classList={ [] }\n          onChange={ this.handleChange }\n          attrs={{ placeholder: 'enter a value' }}\n        />\n      </div>\n    );\n  }\n}\n\nexport default InputWrapper;\n","import React, { Component } from 'react';\nimport { Select } from 'react-nice-inputs';\n\nconst _internals = {};\n\n_internals.countriesOptions = [\n  { label: 'Honduras', value: 'hn' },\n  { label: 'United States', value: 'us' },\n  { label: 'Canada', value: 'ca' }\n];\n\nclass SelectWrapper extends Component {\n\n  state = {\n    countries: ''\n  }\n\n  _handleChange = (value, name, event) => {\n\n    // this.setState({ [event.target.name]: event.target.value });\n    this.setState({ [name]: value });\n  }\n\n  render() {\n\n    return (\n      <div className=\"input-controls\">\n        <label htmlFor=\"countries\">\n          Select a Country:\n        </label>\n        <Select\n          id=\"countries\"\n          name=\"countries\"\n          value={this.state.countries}\n          classList={ [] }\n          onChange={ this._handleChange }\n          options={_internals.countriesOptions}\n          // attrs={}\n          defaultText=\"Select a Country...\"\n        />\n      </div>\n    );\n  }\n}\n\nexport default SelectWrapper;\n","import React, { Component } from 'react';\nimport { InputGroup } from 'react-nice-inputs';\n\nconst _internals = {};\n\n_internals.petsOptions = [\n    { label: 'Dogs 🐺', value: 'dogs' },\n    { label: 'Parrots 🐦', value: 'parrots' },\n    { label: 'Cats 😹', value: 'cats' },\n    { label: 'Dinosaurs 🦖', value: 'dinos', attrs: { disabled: true } }\n  ];\n\nclass InputGroupWrapper extends Component {\n\n  state = {\n    pets: []\n  }\n\n  _handleChange = (value, name, event) => {\n\n    const pets = value.split(',');\n\n    // this.setState({ pets[event.target.name]: event.target.value });\n\n    this.setState({ [name]: pets });\n  }\n\n  render() {\n\n    return (\n      <div className=\"input-controls\">\n        <label htmlFor=\"pets\">Pets:</label>\n        <InputGroup\n          type=\"checkbox\"\n          id=\"pets\"\n          name=\"pets\"\n          value={this.state.pets}\n          classList={ [] }\n          onChange={ this._handleChange }\n          options={_internals.petsOptions}\n        />\n      </div>\n    );\n  }\n}\n\nexport default InputGroupWrapper;\n","import React, { Component } from 'react';\nimport { InputGroup } from 'react-nice-inputs';\n\nconst _internals = {};\n\n_internals.taksOptions = [\n    { label: 'Wash Car', value: 'car' },\n    { label: 'Clean House', value: 'house' },\n    { label: 'Do Homework', value: 'homework' },\n    { label: 'Study', value: 'study', attrs: { disabled: true } }\n  ];\n\nclass InputGroupWrapper extends Component {\n\n  state = {\n    tasks: []\n  }\n\n  _handleChange = (value, name, event) => {\n\n    const tasks = value.split(',');\n\n    // this.setState({ tasks[event.target.name]: event.target.value });\n\n    this.setState({ [name]: tasks });\n  }\n\n  render() {\n\n    return (\n      <div className=\"input-controls\">\n\n        <label htmlFor=\"pets\">Select Task:</label>\n\n        <InputGroup\n          type=\"radio\"\n          id=\"tasks\"\n          name=\"tasks\"\n          value={this.state.tasks}\n          classList={ [] }\n          onChange={ this._handleChange }\n          options={_internals.taksOptions}\n        />\n      </div>\n    );\n  }\n}\n\nexport default InputGroupWrapper;\n","import React, { Component } from 'react';\nimport { FormGroup } from 'react-nice-inputs';\n\nconst _internals = {};\n\n_internals.countriesOptions = [\n  { label: 'Honduras', value: 'hn' },\n  { label: 'United States', value: 'us' },\n  { label: 'Canada', value: 'ca' }\n];\n\nclass AutocompleteWrapper extends Component {\n\n  state = {\n    country: ''\n  }\n\n  _handleChange = (value, name, event) => {\n\n    // this.setState({ [event.target.name]: event.target.value });\n    this.setState({ [name]: value });\n  }\n\n  render() {\n\n    return (\n      <div className=\"input-controls\">\n        <label htmlFor=\"countries\">\n          Select a Country:\n        </label>\n          <FormGroup type=\"autocomplete\"\n            name=\"country\"\n            onChange={ this._handleChange }\n            classList={['']}\n            boxClassList={['sm-12', 'lg-6', 'departing']}\n            label=\"Flights departing from:\"\n            attrs={\n              { placeholder: 'Select Gateway', 'autoComplete': 'off', 'maxLength': 50 }\n            }\n            dataList={_internals.countriesOptions}\n            icon={['icon-pin']}\n          />\n      </div>\n    );\n  }\n}\n\nexport default AutocompleteWrapper;","import React, { Component } from 'react';\nimport { DropDownDate } from 'react-nice-inputs';\n\n\nclass DropDownDateWrapper extends Component {\n\n  state = {\n    birth: ''\n  }\n\n  _handleChange = (value, name, event) => {\n\n    // this.setState({ [event.target.name]: event.target.value });\n\n    this.setState({ [name]: value });\n  }\n\n  render() {\n\n    return (\n      <div className=\"input-controls\">\n        <label htmlFor=\"pets\">Date:</label>\n          <DropDownDate name=\"birth\"\n            classList={ [] }\n            onChange={ this._handleChange }\n            labelM=\"\"\n            labelD=\"\"\n            labelY=\"\"\n            mmClassList={ [ 'sm-4' ] }\n            ddClassList={ [ 'sm-4' ] }\n            yyyyClassList={ [ 'sm-4' ] }\n            defaultTextM=\"MM\"\n            defaultTextD=\"DD\"\n            defaultTextY=\"YYYY\"\n            maxDate=\"2022-01-01\"\n            minDate=\"1985-01-01\"\n            format=\"YYYY-MM-DD\"\n          />\n      </div>\n    );\n  }\n}\n\nexport default DropDownDateWrapper;\n","import React, { Component } from 'react';\nimport { InputMask } from 'react-nice-inputs';\n\nclass InputMaskWrapper extends Component {\n\n  state = {\n    creditCard: ''\n  }\n\n  handleChange = (value, name, event) => {\n    this.setState({ [name]: value });\n    // this.setState({ [event.target.name]: event.target.value });\n  }\n\n  render() {\n\n    return (\n      <div className=\"input-controls\">\n        <label htmlFor=\"creditCard\">Credit Card Number: </label>\n          <InputMask\n            type=\"text\"\n            name=\"creditCard\"\n            classList={ ['hi'] }\n            onChange={ this.handleChange }\n            value={ this.state.creditCard }\n            attrs={{ 'data-testid': 'creditCard', required: true, maxLength: 16}}\n            cc\n            last\n          />\n      </div>\n    );\n  }\n}\n\nexport default InputMaskWrapper;\n","import React from 'react';\nimport '../css/App.css';\n\nimport Input from './Input';\nimport Select from './Select';\nimport InputGroupChekbox from './InputGroupCheckbox';\nimport InputGroupRadio from './InputGroupRadio';\nimport AutoComplete from './Autocomplete';\nimport DropDownDates from './DropDownDates';\nimport InputMask from './InputMask';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>React Nice Inputs</h1>\n\n      <p className=\"intro\">\n        This is a demo of <a href=\"//www.npmjs.com/package/react-nice-inputs\" target=\"_blank\" rel=\"noopener noreferrer\">react-nice-inputs</a>. This repository was created for testing purposes using <a href=\"https://jestjs.io/\" target=\"_blank\" rel=\"noopener noreferrer\">jest</a> and <a href=\"//github.com/airbnb/enzyme/\" target=\"_blank\" rel=\"noopener noreferrer\">enzyme</a>.\n      </p>\n\n      <Input />\n      <Select />\n      <InputGroupChekbox />\n      <InputGroupRadio />\n      <AutoComplete />\n      <DropDownDates />\n      <InputMask />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}